//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Popup_GetMesseges.mp3`.
    static let popup_GetMessegesMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "Popup_GetMesseges", pathExtension: "mp3")
    /// Resource file `Popup_SendMesseges.mp3`.
    static let popup_SendMessegesMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "Popup_SendMesseges", pathExtension: "mp3")
    /// Resource file `mystic_call.mp3`.
    static let mystic_callMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "mystic_call", pathExtension: "mp3")
    
    /// `bundle.url(forResource: "Popup_GetMesseges", withExtension: "mp3")`
    static func popup_GetMessegesMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.popup_GetMessegesMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Popup_SendMesseges", withExtension: "mp3")`
    static func popup_SendMessegesMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.popup_SendMessegesMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "mystic_call", withExtension: "mp3")`
    static func mystic_callMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mystic_callMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-BlackItalic`.
    static let poppinsBlackItalic = Rswift.FontResource(fontName: "Poppins-BlackItalic")
    /// Font `Poppins-Black`.
    static let poppinsBlack = Rswift.FontResource(fontName: "Poppins-Black")
    /// Font `Poppins-BoldItalic`.
    static let poppinsBoldItalic = Rswift.FontResource(fontName: "Poppins-BoldItalic")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-ExtraBoldItalic`.
    static let poppinsExtraBoldItalic = Rswift.FontResource(fontName: "Poppins-ExtraBoldItalic")
    /// Font `Poppins-ExtraBold`.
    static let poppinsExtraBold = Rswift.FontResource(fontName: "Poppins-ExtraBold")
    /// Font `Poppins-ExtraLightItalic`.
    static let poppinsExtraLightItalic = Rswift.FontResource(fontName: "Poppins-ExtraLightItalic")
    /// Font `Poppins-ExtraLight`.
    static let poppinsExtraLight = Rswift.FontResource(fontName: "Poppins-ExtraLight")
    /// Font `Poppins-Italic`.
    static let poppinsItalic = Rswift.FontResource(fontName: "Poppins-Italic")
    /// Font `Poppins-LightItalic`.
    static let poppinsLightItalic = Rswift.FontResource(fontName: "Poppins-LightItalic")
    /// Font `Poppins-Light`.
    static let poppinsLight = Rswift.FontResource(fontName: "Poppins-Light")
    /// Font `Poppins-MediumItalic`.
    static let poppinsMediumItalic = Rswift.FontResource(fontName: "Poppins-MediumItalic")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBoldItalic`.
    static let poppinsSemiBoldItalic = Rswift.FontResource(fontName: "Poppins-SemiBoldItalic")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    /// Font `Poppins-ThinItalic`.
    static let poppinsThinItalic = Rswift.FontResource(fontName: "Poppins-ThinItalic")
    /// Font `Poppins-Thin`.
    static let poppinsThin = Rswift.FontResource(fontName: "Poppins-Thin")
    
    /// `UIFont(name: "Poppins-Black", size: ...)`
    static func poppinsBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlack, size: size)
    }
    
    /// `UIFont(name: "Poppins-BlackItalic", size: ...)`
    static func poppinsBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlackItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }
    
    /// `UIFont(name: "Poppins-BoldItalic", size: ...)`
    static func poppinsBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraBold", size: ...)`
    static func poppinsExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBold, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraBoldItalic", size: ...)`
    static func poppinsExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraLight", size: ...)`
    static func poppinsExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLight, size: size)
    }
    
    /// `UIFont(name: "Poppins-ExtraLightItalic", size: ...)`
    static func poppinsExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLightItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Italic", size: ...)`
    static func poppinsItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Light", size: ...)`
    static func poppinsLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLight, size: size)
    }
    
    /// `UIFont(name: "Poppins-LightItalic", size: ...)`
    static func poppinsLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLightItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }
    
    /// `UIFont(name: "Poppins-MediumItalic", size: ...)`
    static func poppinsMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMediumItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }
    
    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }
    
    /// `UIFont(name: "Poppins-SemiBoldItalic", size: ...)`
    static func poppinsSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Poppins-Thin", size: ...)`
    static func poppinsThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThin, size: size)
    }
    
    /// `UIFont(name: "Poppins-ThinItalic", size: ...)`
    static func poppinsThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThinItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.poppinsBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Black' could not be loaded, is 'Poppins-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BlackItalic' could not be loaded, is 'Poppins-BlackItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BoldItalic' could not be loaded, is 'Poppins-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBold' could not be loaded, is 'Poppins-ExtraBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBoldItalic' could not be loaded, is 'Poppins-ExtraBoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLight' could not be loaded, is 'Poppins-ExtraLight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLightItalic' could not be loaded, is 'Poppins-ExtraLightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Italic' could not be loaded, is 'Poppins-Italic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Light' could not be loaded, is 'Poppins-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-LightItalic' could not be loaded, is 'Poppins-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-MediumItalic' could not be loaded, is 'Poppins-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBoldItalic' could not be loaded, is 'Poppins-SemiBoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Thin' could not be loaded, is 'Poppins-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ThinItalic' could not be loaded, is 'Poppins-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 98 images.
  struct image {
    /// Image `btn_endcall`.
    static let btn_endcall = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_endcall")
    /// Image `btn_mute`.
    static let btn_mute = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_mute")
    /// Image `btn_speaker_blue`.
    static let btn_speaker_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_speaker_blue")
    /// Image `hangUpButton`.
    static let hangUpButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "hangUpButton")
    /// Image `ic_MOreSearch`.
    static let ic_MOreSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_MOreSearch")
    /// Image `ic_addBtn`.
    static let ic_addBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_addBtn")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_attach`.
    static let ic_attach = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_attach")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_bigCamera`.
    static let ic_bigCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bigCamera")
    /// Image `ic_bigNoMessage`.
    static let ic_bigNoMessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bigNoMessage")
    /// Image `ic_blockedUsers`.
    static let ic_blockedUsers = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blockedUsers")
    /// Image `ic_callBig`.
    static let ic_callBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_callBig")
    /// Image `ic_callIcon`.
    static let ic_callIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_callIcon")
    /// Image `ic_callRed`.
    static let ic_callRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_callRed")
    /// Image `ic_call_white`.
    static let ic_call_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call_white")
    /// Image `ic_calls`.
    static let ic_calls = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calls")
    /// Image `ic_camera`.
    static let ic_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera")
    /// Image `ic_cancel`.
    static let ic_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cancel")
    /// Image `ic_case`.
    static let ic_case = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_case")
    /// Image `ic_chat_bacground`.
    static let ic_chat_bacground = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_bacground")
    /// Image `ic_chat_violet`.
    static let ic_chat_violet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chat_violet")
    /// Image `ic_chats`.
    static let ic_chats = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chats")
    /// Image `ic_checkRed`.
    static let ic_checkRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkRed")
    /// Image `ic_check_red`.
    static let ic_check_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_red")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_checkblack`.
    static let ic_checkblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkblack")
    /// Image `ic_color`.
    static let ic_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_color")
    /// Image `ic_contact`.
    static let ic_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact")
    /// Image `ic_cross`.
    static let ic_cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cross")
    /// Image `ic_doc`.
    static let ic_doc = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_doc")
    /// Image `ic_emailBlack`.
    static let ic_emailBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_emailBlack")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_facebook`.
    static let ic_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebook")
    /// Image `ic_filterFind`.
    static let ic_filterFind = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filterFind")
    /// Image `ic_filter`.
    static let ic_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter")
    /// Image `ic_globe`.
    static let ic_globe = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_globe")
    /// Image `ic_google`.
    static let ic_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_google")
    /// Image `ic_gray_right`.
    static let ic_gray_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gray_right")
    /// Image `ic_happy`.
    static let ic_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_happy")
    /// Image `ic_instagram`.
    static let ic_instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_instagram")
    /// Image `ic_intro_forwardarrow`.
    static let ic_intro_forwardarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_intro_forwardarrow")
    /// Image `ic_lock`.
    static let ic_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lock")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_magnifying_glass`.
    static let ic_magnifying_glass = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_magnifying_glass")
    /// Image `ic_male`.
    static let ic_male = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_male")
    /// Image `ic_manFilter`.
    static let ic_manFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_manFilter")
    /// Image `ic_marker`.
    static let ic_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_marker")
    /// Image `ic_microphone`.
    static let ic_microphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_microphone")
    /// Image `ic_more`.
    static let ic_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more")
    /// Image `ic_nearBy`.
    static let ic_nearBy = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nearBy")
    /// Image `ic_paper_plane`.
    static let ic_paper_plane = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_paper_plane")
    /// Image `ic_password`.
    static let ic_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_password")
    /// Image `ic_pauseBtn`.
    static let ic_pauseBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pauseBtn")
    /// Image `ic_personBlack`.
    static let ic_personBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_personBlack")
    /// Image `ic_personFilter`.
    static let ic_personFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_personFilter")
    /// Image `ic_persons`.
    static let ic_persons = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_persons")
    /// Image `ic_playBtn`.
    static let ic_playBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_playBtn")
    /// Image `ic_playlist`.
    static let ic_playlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_playlist")
    /// Image `ic_profileimage`.
    static let ic_profileimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profileimage")
    /// Image `ic_radio_off`.
    static let ic_radio_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_off")
    /// Image `ic_radio_on`.
    static let ic_radio_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_radio_on")
    /// Image `ic_rocket`.
    static let ic_rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rocket")
    /// Image `ic_sear`.
    static let ic_sear = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sear")
    /// Image `ic_search1`.
    static let ic_search1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search1")
    /// Image `ic_searchMore`.
    static let ic_searchMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_searchMore")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_searchbig`.
    static let ic_searchbig = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_searchbig")
    /// Image `ic_seenCheck`.
    static let ic_seenCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_seenCheck")
    /// Image `ic_seen`.
    static let ic_seen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_seen")
    /// Image `ic_selectPhoto`.
    static let ic_selectPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_selectPhoto")
    /// Image `ic_send`.
    static let ic_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send")
    /// Image `ic_speakerOff`.
    static let ic_speakerOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_speakerOff")
    /// Image `ic_speakerOn`.
    static let ic_speakerOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_speakerOn")
    /// Image `ic_statusFilter`.
    static let ic_statusFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_statusFilter")
    /// Image `ic_stories`.
    static let ic_stories = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_stories")
    /// Image `ic_translation_settings`.
    static let ic_translation_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_translation_settings")
    /// Image `ic_trash`.
    static let ic_trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_trash")
    /// Image `ic_twitter`.
    static let ic_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_twitter")
    /// Image `ic_uncheckRed`.
    static let ic_uncheckRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheckRed")
    /// Image `ic_uncheck_red`.
    static let ic_uncheck_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck_red")
    /// Image `ic_uncheck`.
    static let ic_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck")
    /// Image `ic_username`.
    static let ic_username = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_username")
    /// Image `ic_videoBlack`.
    static let ic_videoBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_videoBlack")
    /// Image `ic_videoBordered`.
    static let ic_videoBordered = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_videoBordered")
    /// Image `ic_video_white`.
    static let ic_video_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video_white")
    /// Image `ic_video`.
    static let ic_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_video")
    /// Image `ic_youtube`.
    static let ic_youtube = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_youtube")
    /// Image `img_splash`.
    static let img_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_splash")
    /// Image `localVideoMutedBg`.
    static let localVideoMutedBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "localVideoMutedBg")
    /// Image `login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "login")
    /// Image `muteButtonSelected`.
    static let muteButtonSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "muteButtonSelected")
    /// Image `muteButton`.
    static let muteButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "muteButton")
    /// Image `switchCameraButtonSelected`.
    static let switchCameraButtonSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "switchCameraButtonSelected")
    /// Image `switchCameraButton`.
    static let switchCameraButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "switchCameraButton")
    /// Image `videoMuteButtonSelected`.
    static let videoMuteButtonSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoMuteButtonSelected")
    /// Image `videoMuteButton`.
    static let videoMuteButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoMuteButton")
    /// Image `videoMutedIndicator`.
    static let videoMutedIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoMutedIndicator")
    
    /// `UIImage(named: "btn_endcall", bundle: ..., traitCollection: ...)`
    static func btn_endcall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_endcall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_mute", bundle: ..., traitCollection: ...)`
    static func btn_mute(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_mute, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_speaker_blue", bundle: ..., traitCollection: ...)`
    static func btn_speaker_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_speaker_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hangUpButton", bundle: ..., traitCollection: ...)`
    static func hangUpButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hangUpButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_MOreSearch", bundle: ..., traitCollection: ...)`
    static func ic_MOreSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_MOreSearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_addBtn", bundle: ..., traitCollection: ...)`
    static func ic_addBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_addBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_attach", bundle: ..., traitCollection: ...)`
    static func ic_attach(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_attach, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bigCamera", bundle: ..., traitCollection: ...)`
    static func ic_bigCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bigCamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_bigNoMessage", bundle: ..., traitCollection: ...)`
    static func ic_bigNoMessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bigNoMessage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_blockedUsers", bundle: ..., traitCollection: ...)`
    static func ic_blockedUsers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blockedUsers, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_callBig", bundle: ..., traitCollection: ...)`
    static func ic_callBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_callBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_callIcon", bundle: ..., traitCollection: ...)`
    static func ic_callIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_callIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_callRed", bundle: ..., traitCollection: ...)`
    static func ic_callRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_callRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_call_white", bundle: ..., traitCollection: ...)`
    static func ic_call_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_calls", bundle: ..., traitCollection: ...)`
    static func ic_calls(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calls, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_camera", bundle: ..., traitCollection: ...)`
    static func ic_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cancel", bundle: ..., traitCollection: ...)`
    static func ic_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_case", bundle: ..., traitCollection: ...)`
    static func ic_case(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_case, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chat_bacground", bundle: ..., traitCollection: ...)`
    static func ic_chat_bacground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_bacground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chat_violet", bundle: ..., traitCollection: ...)`
    static func ic_chat_violet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chat_violet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_chats", bundle: ..., traitCollection: ...)`
    static func ic_chats(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chats, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checkRed", bundle: ..., traitCollection: ...)`
    static func ic_checkRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_red", bundle: ..., traitCollection: ...)`
    static func ic_check_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_checkblack", bundle: ..., traitCollection: ...)`
    static func ic_checkblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_color", bundle: ..., traitCollection: ...)`
    static func ic_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_color, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_contact", bundle: ..., traitCollection: ...)`
    static func ic_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cross", bundle: ..., traitCollection: ...)`
    static func ic_cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cross, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_doc", bundle: ..., traitCollection: ...)`
    static func ic_doc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_doc, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_emailBlack", bundle: ..., traitCollection: ...)`
    static func ic_emailBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_emailBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_facebook", bundle: ..., traitCollection: ...)`
    static func ic_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_filter", bundle: ..., traitCollection: ...)`
    static func ic_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_filterFind", bundle: ..., traitCollection: ...)`
    static func ic_filterFind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filterFind, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_globe", bundle: ..., traitCollection: ...)`
    static func ic_globe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_globe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_google", bundle: ..., traitCollection: ...)`
    static func ic_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_google, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_gray_right", bundle: ..., traitCollection: ...)`
    static func ic_gray_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gray_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_happy", bundle: ..., traitCollection: ...)`
    static func ic_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_happy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_instagram", bundle: ..., traitCollection: ...)`
    static func ic_instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_instagram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_intro_forwardarrow", bundle: ..., traitCollection: ...)`
    static func ic_intro_forwardarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_intro_forwardarrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_lock", bundle: ..., traitCollection: ...)`
    static func ic_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_magnifying_glass", bundle: ..., traitCollection: ...)`
    static func ic_magnifying_glass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_magnifying_glass, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_male", bundle: ..., traitCollection: ...)`
    static func ic_male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_manFilter", bundle: ..., traitCollection: ...)`
    static func ic_manFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_manFilter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_marker", bundle: ..., traitCollection: ...)`
    static func ic_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_marker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_microphone", bundle: ..., traitCollection: ...)`
    static func ic_microphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_microphone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_more", bundle: ..., traitCollection: ...)`
    static func ic_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_nearBy", bundle: ..., traitCollection: ...)`
    static func ic_nearBy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nearBy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_paper_plane", bundle: ..., traitCollection: ...)`
    static func ic_paper_plane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_paper_plane, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_password", bundle: ..., traitCollection: ...)`
    static func ic_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pauseBtn", bundle: ..., traitCollection: ...)`
    static func ic_pauseBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pauseBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_personBlack", bundle: ..., traitCollection: ...)`
    static func ic_personBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_personBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_personFilter", bundle: ..., traitCollection: ...)`
    static func ic_personFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_personFilter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_persons", bundle: ..., traitCollection: ...)`
    static func ic_persons(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_persons, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_playBtn", bundle: ..., traitCollection: ...)`
    static func ic_playBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_playBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_playlist", bundle: ..., traitCollection: ...)`
    static func ic_playlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_playlist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_profileimage", bundle: ..., traitCollection: ...)`
    static func ic_profileimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profileimage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_radio_off", bundle: ..., traitCollection: ...)`
    static func ic_radio_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_radio_on", bundle: ..., traitCollection: ...)`
    static func ic_radio_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_radio_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_rocket", bundle: ..., traitCollection: ...)`
    static func ic_rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rocket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sear", bundle: ..., traitCollection: ...)`
    static func ic_sear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sear, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search1", bundle: ..., traitCollection: ...)`
    static func ic_search1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_searchMore", bundle: ..., traitCollection: ...)`
    static func ic_searchMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_searchMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_searchbig", bundle: ..., traitCollection: ...)`
    static func ic_searchbig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_searchbig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_seen", bundle: ..., traitCollection: ...)`
    static func ic_seen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_seen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_seenCheck", bundle: ..., traitCollection: ...)`
    static func ic_seenCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_seenCheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_selectPhoto", bundle: ..., traitCollection: ...)`
    static func ic_selectPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_selectPhoto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_send", bundle: ..., traitCollection: ...)`
    static func ic_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_speakerOff", bundle: ..., traitCollection: ...)`
    static func ic_speakerOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_speakerOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_speakerOn", bundle: ..., traitCollection: ...)`
    static func ic_speakerOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_speakerOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_statusFilter", bundle: ..., traitCollection: ...)`
    static func ic_statusFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_statusFilter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_stories", bundle: ..., traitCollection: ...)`
    static func ic_stories(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_stories, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_translation_settings", bundle: ..., traitCollection: ...)`
    static func ic_translation_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_translation_settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_trash", bundle: ..., traitCollection: ...)`
    static func ic_trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_trash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_twitter", bundle: ..., traitCollection: ...)`
    static func ic_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uncheckRed", bundle: ..., traitCollection: ...)`
    static func ic_uncheckRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheckRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_uncheck_red", bundle: ..., traitCollection: ...)`
    static func ic_uncheck_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_username", bundle: ..., traitCollection: ...)`
    static func ic_username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_username, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video", bundle: ..., traitCollection: ...)`
    static func ic_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_videoBlack", bundle: ..., traitCollection: ...)`
    static func ic_videoBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_videoBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_videoBordered", bundle: ..., traitCollection: ...)`
    static func ic_videoBordered(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_videoBordered, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_video_white", bundle: ..., traitCollection: ...)`
    static func ic_video_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_video_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_youtube", bundle: ..., traitCollection: ...)`
    static func ic_youtube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_youtube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_splash", bundle: ..., traitCollection: ...)`
    static func img_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_splash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "localVideoMutedBg", bundle: ..., traitCollection: ...)`
    static func localVideoMutedBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.localVideoMutedBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "muteButton", bundle: ..., traitCollection: ...)`
    static func muteButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.muteButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "muteButtonSelected", bundle: ..., traitCollection: ...)`
    static func muteButtonSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.muteButtonSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switchCameraButton", bundle: ..., traitCollection: ...)`
    static func switchCameraButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchCameraButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switchCameraButtonSelected", bundle: ..., traitCollection: ...)`
    static func switchCameraButtonSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchCameraButtonSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "videoMuteButton", bundle: ..., traitCollection: ...)`
    static func videoMuteButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoMuteButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "videoMuteButtonSelected", bundle: ..., traitCollection: ...)`
    static func videoMuteButtonSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoMuteButtonSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "videoMutedIndicator", bundle: ..., traitCollection: ...)`
    static func videoMutedIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoMutedIndicator, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 32 nibs.
  struct nib {
    /// Nib `AddParticipant-CollectionCell`.
    static let addParticipantCollectionCell = _R.nib._AddParticipantCollectionCell()
    /// Nib `AddParticipants-TableCell`.
    static let addParticipantsTableCell = _R.nib._AddParticipantsTableCell()
    /// Nib `BlockedUsers-TableCell`.
    static let blockedUsersTableCell = _R.nib._BlockedUsersTableCell()
    /// Nib `Calls-TableCell`.
    static let callsTableCell = _R.nib._CallsTableCell()
    /// Nib `ChatReceiver-TableCell`.
    static let chatReceiverTableCell = _R.nib._ChatReceiverTableCell()
    /// Nib `ChatReceiverAudio-TableCell`.
    static let chatReceiverAudioTableCell = _R.nib._ChatReceiverAudioTableCell()
    /// Nib `ChatReceiverContact-TableCell`.
    static let chatReceiverContactTableCell = _R.nib._ChatReceiverContactTableCell()
    /// Nib `ChatReceiverDocument-TableCell`.
    static let chatReceiverDocumentTableCell = _R.nib._ChatReceiverDocumentTableCell()
    /// Nib `ChatReceiverImage-TableCell`.
    static let chatReceiverImageTableCell = _R.nib._ChatReceiverImageTableCell()
    /// Nib `ChatReceiverStricker-TableCell`.
    static let chatReceiverStrickerTableCell = _R.nib._ChatReceiverStrickerTableCell()
    /// Nib `ChatSender-TableCell`.
    static let chatSenderTableCell = _R.nib._ChatSenderTableCell()
    /// Nib `ChatSenderAudio-TableCell`.
    static let chatSenderAudioTableCell = _R.nib._ChatSenderAudioTableCell()
    /// Nib `ChatSenderContact-TableCell`.
    static let chatSenderContactTableCell = _R.nib._ChatSenderContactTableCell()
    /// Nib `ChatSenderDocument-TableCell`.
    static let chatSenderDocumentTableCell = _R.nib._ChatSenderDocumentTableCell()
    /// Nib `ChatSenderImage-TableCell`.
    static let chatSenderImageTableCell = _R.nib._ChatSenderImageTableCell()
    /// Nib `ChatSenderSticker-TableCell`.
    static let chatSenderStickerTableCell = _R.nib._ChatSenderStickerTableCell()
    /// Nib `Chats-TableCell`.
    static let chatsTableCell = _R.nib._ChatsTableCell()
    /// Nib `CreateGroup-CollectionCell`.
    static let createGroupCollectionCell = _R.nib._CreateGroupCollectionCell()
    /// Nib `FindFriends-CollectionCell`.
    static let findFriendsCollectionCell = _R.nib._FindFriendsCollectionCell()
    /// Nib `Followings-TableCell`.
    static let followingsTableCell = _R.nib._FollowingsTableCell()
    /// Nib `Group-TableCell`.
    static let groupTableCell = _R.nib._GroupTableCell()
    /// Nib `GroupRequest-TableCell`.
    static let groupRequestTableCell = _R.nib._GroupRequestTableCell()
    /// Nib `IntroItemView`.
    static let introItemView = _R.nib._IntroItemView()
    /// Nib `InviteFriends-TableCell`.
    static let inviteFriendsTableCell = _R.nib._InviteFriendsTableCell()
    /// Nib `RequestGroupOne-TableCell`.
    static let requestGroupOneTableCell = _R.nib._RequestGroupOneTableCell()
    /// Nib `SearchRandom-TableCell`.
    static let searchRandomTableCell = _R.nib._SearchRandomTableCell()
    /// Nib `SelectCategory-TableCell`.
    static let selectCategoryTableCell = _R.nib._SelectCategoryTableCell()
    /// Nib `SelectContact-TableCell`.
    static let selectContactTableCell = _R.nib._SelectContactTableCell()
    /// Nib `SelectLanguage-TableCell`.
    static let selectLanguageTableCell = _R.nib._SelectLanguageTableCell()
    /// Nib `SelectType-TableCell`.
    static let selectTypeTableCell = _R.nib._SelectTypeTableCell()
    /// Nib `Stories-TableCell`.
    static let storiesTableCell = _R.nib._StoriesTableCell()
    /// Nib `UserSuggestionCollectionCell`.
    static let userSuggestionCollectionCell = _R.nib._UserSuggestionCollectionCell()
    
    /// `UINib(name: "AddParticipant-CollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addParticipantCollectionCell) instead")
    static func addParticipantCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addParticipantCollectionCell)
    }
    
    /// `UINib(name: "AddParticipants-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addParticipantsTableCell) instead")
    static func addParticipantsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addParticipantsTableCell)
    }
    
    /// `UINib(name: "BlockedUsers-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blockedUsersTableCell) instead")
    static func blockedUsersTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blockedUsersTableCell)
    }
    
    /// `UINib(name: "Calls-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.callsTableCell) instead")
    static func callsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.callsTableCell)
    }
    
    /// `UINib(name: "ChatReceiver-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatReceiverTableCell) instead")
    static func chatReceiverTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatReceiverTableCell)
    }
    
    /// `UINib(name: "ChatReceiverAudio-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatReceiverAudioTableCell) instead")
    static func chatReceiverAudioTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatReceiverAudioTableCell)
    }
    
    /// `UINib(name: "ChatReceiverContact-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatReceiverContactTableCell) instead")
    static func chatReceiverContactTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatReceiverContactTableCell)
    }
    
    /// `UINib(name: "ChatReceiverDocument-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatReceiverDocumentTableCell) instead")
    static func chatReceiverDocumentTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatReceiverDocumentTableCell)
    }
    
    /// `UINib(name: "ChatReceiverImage-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatReceiverImageTableCell) instead")
    static func chatReceiverImageTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatReceiverImageTableCell)
    }
    
    /// `UINib(name: "ChatReceiverStricker-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatReceiverStrickerTableCell) instead")
    static func chatReceiverStrickerTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatReceiverStrickerTableCell)
    }
    
    /// `UINib(name: "ChatSender-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatSenderTableCell) instead")
    static func chatSenderTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatSenderTableCell)
    }
    
    /// `UINib(name: "ChatSenderAudio-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatSenderAudioTableCell) instead")
    static func chatSenderAudioTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatSenderAudioTableCell)
    }
    
    /// `UINib(name: "ChatSenderContact-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatSenderContactTableCell) instead")
    static func chatSenderContactTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatSenderContactTableCell)
    }
    
    /// `UINib(name: "ChatSenderDocument-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatSenderDocumentTableCell) instead")
    static func chatSenderDocumentTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatSenderDocumentTableCell)
    }
    
    /// `UINib(name: "ChatSenderImage-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatSenderImageTableCell) instead")
    static func chatSenderImageTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatSenderImageTableCell)
    }
    
    /// `UINib(name: "ChatSenderSticker-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatSenderStickerTableCell) instead")
    static func chatSenderStickerTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatSenderStickerTableCell)
    }
    
    /// `UINib(name: "Chats-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatsTableCell) instead")
    static func chatsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatsTableCell)
    }
    
    /// `UINib(name: "CreateGroup-CollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.createGroupCollectionCell) instead")
    static func createGroupCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createGroupCollectionCell)
    }
    
    /// `UINib(name: "FindFriends-CollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.findFriendsCollectionCell) instead")
    static func findFriendsCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.findFriendsCollectionCell)
    }
    
    /// `UINib(name: "Followings-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.followingsTableCell) instead")
    static func followingsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.followingsTableCell)
    }
    
    /// `UINib(name: "Group-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupTableCell) instead")
    static func groupTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupTableCell)
    }
    
    /// `UINib(name: "GroupRequest-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupRequestTableCell) instead")
    static func groupRequestTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupRequestTableCell)
    }
    
    /// `UINib(name: "IntroItemView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.introItemView) instead")
    static func introItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.introItemView)
    }
    
    /// `UINib(name: "InviteFriends-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.inviteFriendsTableCell) instead")
    static func inviteFriendsTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inviteFriendsTableCell)
    }
    
    /// `UINib(name: "RequestGroupOne-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestGroupOneTableCell) instead")
    static func requestGroupOneTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestGroupOneTableCell)
    }
    
    /// `UINib(name: "SearchRandom-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchRandomTableCell) instead")
    static func searchRandomTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchRandomTableCell)
    }
    
    /// `UINib(name: "SelectCategory-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectCategoryTableCell) instead")
    static func selectCategoryTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectCategoryTableCell)
    }
    
    /// `UINib(name: "SelectContact-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectContactTableCell) instead")
    static func selectContactTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectContactTableCell)
    }
    
    /// `UINib(name: "SelectLanguage-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectLanguageTableCell) instead")
    static func selectLanguageTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectLanguageTableCell)
    }
    
    /// `UINib(name: "SelectType-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectTypeTableCell) instead")
    static func selectTypeTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectTypeTableCell)
    }
    
    /// `UINib(name: "Stories-TableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.storiesTableCell) instead")
    static func storiesTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.storiesTableCell)
    }
    
    /// `UINib(name: "UserSuggestionCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userSuggestionCollectionCell) instead")
    static func userSuggestionCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userSuggestionCollectionCell)
    }
    
    static func addParticipantCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddParticipant_CollectionCell? {
      return R.nib.addParticipantCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddParticipant_CollectionCell
    }
    
    static func addParticipantsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddParticipants_TableCell? {
      return R.nib.addParticipantsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddParticipants_TableCell
    }
    
    static func blockedUsersTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedUsers_TableCell? {
      return R.nib.blockedUsersTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedUsers_TableCell
    }
    
    static func callsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Calls_TableCell? {
      return R.nib.callsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Calls_TableCell
    }
    
    static func chatReceiverAudioTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverAudio_TableCell? {
      return R.nib.chatReceiverAudioTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverAudio_TableCell
    }
    
    static func chatReceiverContactTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverContact_TableCell? {
      return R.nib.chatReceiverContactTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverContact_TableCell
    }
    
    static func chatReceiverDocumentTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverDocument_TableCell? {
      return R.nib.chatReceiverDocumentTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverDocument_TableCell
    }
    
    static func chatReceiverImageTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverImage_TableCell? {
      return R.nib.chatReceiverImageTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverImage_TableCell
    }
    
    static func chatReceiverStrickerTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverStricker_TableCell? {
      return R.nib.chatReceiverStrickerTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverStricker_TableCell
    }
    
    static func chatReceiverTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiver_TableCell? {
      return R.nib.chatReceiverTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiver_TableCell
    }
    
    static func chatSenderAudioTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderAudio_TableCell? {
      return R.nib.chatSenderAudioTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderAudio_TableCell
    }
    
    static func chatSenderContactTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderContact_TableCell? {
      return R.nib.chatSenderContactTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderContact_TableCell
    }
    
    static func chatSenderDocumentTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderDocument_TableCell? {
      return R.nib.chatSenderDocumentTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderDocument_TableCell
    }
    
    static func chatSenderImageTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderImage_TableCell? {
      return R.nib.chatSenderImageTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderImage_TableCell
    }
    
    static func chatSenderStickerTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderSticker_TableCell? {
      return R.nib.chatSenderStickerTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderSticker_TableCell
    }
    
    static func chatSenderTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSender_TableCell? {
      return R.nib.chatSenderTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSender_TableCell
    }
    
    static func chatsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Chats_TableCell? {
      return R.nib.chatsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Chats_TableCell
    }
    
    static func createGroupCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CreateGroup_CollectionCell? {
      return R.nib.createGroupCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateGroup_CollectionCell
    }
    
    static func findFriendsCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindFriends_CollectionCell? {
      return R.nib.findFriendsCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindFriends_CollectionCell
    }
    
    static func followingsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Followings_TableCell? {
      return R.nib.followingsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Followings_TableCell
    }
    
    static func groupRequestTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupRequest_TableCell? {
      return R.nib.groupRequestTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupRequest_TableCell
    }
    
    static func groupTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Group_TableCell? {
      return R.nib.groupTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Group_TableCell
    }
    
    static func introItemView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroItem? {
      return R.nib.introItemView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroItem
    }
    
    static func inviteFriendsTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InviteFriends_TableCell? {
      return R.nib.inviteFriendsTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InviteFriends_TableCell
    }
    
    static func requestGroupOneTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestGroupOne_TableCell? {
      return R.nib.requestGroupOneTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestGroupOne_TableCell
    }
    
    static func searchRandomTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchRandom_TableCell? {
      return R.nib.searchRandomTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchRandom_TableCell
    }
    
    static func selectCategoryTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCategory_TableCell? {
      return R.nib.selectCategoryTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCategory_TableCell
    }
    
    static func selectContactTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectContact_TableCell? {
      return R.nib.selectContactTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectContact_TableCell
    }
    
    static func selectLanguageTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectLanguage_TableCell? {
      return R.nib.selectLanguageTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectLanguage_TableCell
    }
    
    static func selectTypeTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectType_TableCell? {
      return R.nib.selectTypeTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectType_TableCell
    }
    
    static func storiesTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Stories_TableCell? {
      return R.nib.storiesTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Stories_TableCell
    }
    
    static func userSuggestionCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserSuggestionCollectionCell? {
      return R.nib.userSuggestionCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserSuggestionCollectionCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 31 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddParticipant_CollectionCell`.
    static let addParticipant_CollectionCell: Rswift.ReuseIdentifier<AddParticipant_CollectionCell> = Rswift.ReuseIdentifier(identifier: "AddParticipant_CollectionCell")
    /// Reuse identifier `AddParticipants_TableCell`.
    static let addParticipants_TableCell: Rswift.ReuseIdentifier<AddParticipants_TableCell> = Rswift.ReuseIdentifier(identifier: "AddParticipants_TableCell")
    /// Reuse identifier `BlockedUsers_TableCell`.
    static let blockedUsers_TableCell: Rswift.ReuseIdentifier<BlockedUsers_TableCell> = Rswift.ReuseIdentifier(identifier: "BlockedUsers_TableCell")
    /// Reuse identifier `Calls_TableCell`.
    static let calls_TableCell: Rswift.ReuseIdentifier<Calls_TableCell> = Rswift.ReuseIdentifier(identifier: "Calls_TableCell")
    /// Reuse identifier `ChatReceiverAudio_TableCell`.
    static let chatReceiverAudio_TableCell: Rswift.ReuseIdentifier<ChatReceiverAudio_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatReceiverAudio_TableCell")
    /// Reuse identifier `ChatReceiverContact_TableCell`.
    static let chatReceiverContact_TableCell: Rswift.ReuseIdentifier<ChatReceiverContact_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatReceiverContact_TableCell")
    /// Reuse identifier `ChatReceiverDocument_TableCell`.
    static let chatReceiverDocument_TableCell: Rswift.ReuseIdentifier<ChatReceiverDocument_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatReceiverDocument_TableCell")
    /// Reuse identifier `ChatReceiverImage_TableCell`.
    static let chatReceiverImage_TableCell: Rswift.ReuseIdentifier<ChatReceiverImage_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatReceiverImage_TableCell")
    /// Reuse identifier `ChatReceiverStricker_TableCell`.
    static let chatReceiverStricker_TableCell: Rswift.ReuseIdentifier<ChatReceiverStricker_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatReceiverStricker_TableCell")
    /// Reuse identifier `ChatReceiver_TableCell`.
    static let chatReceiver_TableCell: Rswift.ReuseIdentifier<ChatReceiver_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatReceiver_TableCell")
    /// Reuse identifier `ChatSenderAudio_TableCell`.
    static let chatSenderAudio_TableCell: Rswift.ReuseIdentifier<ChatSenderAudio_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatSenderAudio_TableCell")
    /// Reuse identifier `ChatSenderContact_TableCell`.
    static let chatSenderContact_TableCell: Rswift.ReuseIdentifier<ChatSenderContact_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatSenderContact_TableCell")
    /// Reuse identifier `ChatSenderDocument_TableCell`.
    static let chatSenderDocument_TableCell: Rswift.ReuseIdentifier<ChatSenderDocument_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatSenderDocument_TableCell")
    /// Reuse identifier `ChatSenderImage_TableCell`.
    static let chatSenderImage_TableCell: Rswift.ReuseIdentifier<ChatSenderImage_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatSenderImage_TableCell")
    /// Reuse identifier `ChatSenderSticker_TableCel`.
    static let chatSenderSticker_TableCel: Rswift.ReuseIdentifier<ChatSenderSticker_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatSenderSticker_TableCel")
    /// Reuse identifier `ChatSender_TableCell`.
    static let chatSender_TableCell: Rswift.ReuseIdentifier<ChatSender_TableCell> = Rswift.ReuseIdentifier(identifier: "ChatSender_TableCell")
    /// Reuse identifier `Chats_TableCell`.
    static let chats_TableCell: Rswift.ReuseIdentifier<Chats_TableCell> = Rswift.ReuseIdentifier(identifier: "Chats_TableCell")
    /// Reuse identifier `CreateGroup_CollectionCell`.
    static let createGroup_CollectionCell: Rswift.ReuseIdentifier<CreateGroup_CollectionCell> = Rswift.ReuseIdentifier(identifier: "CreateGroup_CollectionCell")
    /// Reuse identifier `FindFriends_CollectionCell`.
    static let findFriends_CollectionCell: Rswift.ReuseIdentifier<FindFriends_CollectionCell> = Rswift.ReuseIdentifier(identifier: "FindFriends_CollectionCell")
    /// Reuse identifier `Followings_TableCell`.
    static let followings_TableCell: Rswift.ReuseIdentifier<Followings_TableCell> = Rswift.ReuseIdentifier(identifier: "Followings_TableCell")
    /// Reuse identifier `GroupRequest_TableCell`.
    static let groupRequest_TableCell: Rswift.ReuseIdentifier<GroupRequest_TableCell> = Rswift.ReuseIdentifier(identifier: "GroupRequest_TableCell")
    /// Reuse identifier `Group_TableCell`.
    static let group_TableCell: Rswift.ReuseIdentifier<Group_TableCell> = Rswift.ReuseIdentifier(identifier: "Group_TableCell")
    /// Reuse identifier `InviteFriends_TableCell`.
    static let inviteFriends_TableCell: Rswift.ReuseIdentifier<InviteFriends_TableCell> = Rswift.ReuseIdentifier(identifier: "InviteFriends_TableCell")
    /// Reuse identifier `RequestGroupOne_TableCell`.
    static let requestGroupOne_TableCell: Rswift.ReuseIdentifier<RequestGroupOne_TableCell> = Rswift.ReuseIdentifier(identifier: "RequestGroupOne_TableCell")
    /// Reuse identifier `SearchRandom_TableCell`.
    static let searchRandom_TableCell: Rswift.ReuseIdentifier<SearchRandom_TableCell> = Rswift.ReuseIdentifier(identifier: "SearchRandom_TableCell")
    /// Reuse identifier `SelectCategory_TableCell`.
    static let selectCategory_TableCell: Rswift.ReuseIdentifier<SelectCategory_TableCell> = Rswift.ReuseIdentifier(identifier: "SelectCategory_TableCell")
    /// Reuse identifier `SelectContact_TableCell`.
    static let selectContact_TableCell: Rswift.ReuseIdentifier<SelectContact_TableCell> = Rswift.ReuseIdentifier(identifier: "SelectContact_TableCell")
    /// Reuse identifier `SelectLanguage_TableCell`.
    static let selectLanguage_TableCell: Rswift.ReuseIdentifier<SelectLanguage_TableCell> = Rswift.ReuseIdentifier(identifier: "SelectLanguage_TableCell")
    /// Reuse identifier `SelectType_TableCell`.
    static let selectType_TableCell: Rswift.ReuseIdentifier<SelectType_TableCell> = Rswift.ReuseIdentifier(identifier: "SelectType_TableCell")
    /// Reuse identifier `Stories_TableCell`.
    static let stories_TableCell: Rswift.ReuseIdentifier<Stories_TableCell> = Rswift.ReuseIdentifier(identifier: "Stories_TableCell")
    /// Reuse identifier `UserSuggestionCollectionCell`.
    static let userSuggestionCollectionCell: Rswift.ReuseIdentifier<UserSuggestionCollectionCell> = Rswift.ReuseIdentifier(identifier: "UserSuggestionCollectionCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `Call`.
    static let call = _R.storyboard.call()
    /// Storyboard `Chat`.
    static let chat = _R.storyboard.chat()
    /// Storyboard `Dashboard`.
    static let dashboard = _R.storyboard.dashboard()
    /// Storyboard `FindFriends`.
    static let findFriends = _R.storyboard.findFriends()
    /// Storyboard `Group`.
    static let group = _R.storyboard.group()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Story`.
    static let story = _R.storyboard.story()
    
    /// `UIStoryboard(name: "Call", bundle: ...)`
    static func call(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.call)
    }
    
    /// `UIStoryboard(name: "Chat", bundle: ...)`
    static func chat(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chat)
    }
    
    /// `UIStoryboard(name: "Dashboard", bundle: ...)`
    static func dashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboard)
    }
    
    /// `UIStoryboard(name: "FindFriends", bundle: ...)`
    static func findFriends(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.findFriends)
    }
    
    /// `UIStoryboard(name: "Group", bundle: ...)`
    static func group(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.group)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "Story", bundle: ...)`
    static func story(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.story)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 103 localization keys.
    struct localizable {
      /// en translation: Done
      /// 
      /// Locales: en
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fast so we can take you to our space
      /// 
      /// Locales: en
      static let fastSoWeCanTakeYouToOurSpace = Rswift.StringResource(key: "Fast so we can take you to our space", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Find new friends and contacts
      /// 
      /// Locales: en
      static let findNewFriendsAndContacts = Rswift.StringResource(key: "Find new friends and contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keep you conversation going from all devices
      /// 
      /// Locales: en
      static let keepYouConversationGoingFromAllDevices = Rswift.StringResource(key: "Keep you conversation going from all devices", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New Features
      /// 
      /// Locales: en
      static let newFeatures = Rswift.StringResource(key: "New Features", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New Version
      /// 
      /// Locales: en
      static let newVersion = Rswift.StringResource(key: "New Version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please write your email
      /// 
      /// Locales: en
      static let pleaseWriteYourEmail = Rswift.StringResource(key: "Please write your email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      /// 
      /// Locales: en
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search Globally
      /// 
      /// Locales: en
      static let searchGlobally = Rswift.StringResource(key: "Search Globally", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send & Recieve all kind of messages
      /// 
      /// Locales: en
      static let sendRecieveAllKindOfMessages = Rswift.StringResource(key: "Send & Recieve all kind of messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stay Sync
      /// 
      /// Locales: en
      static let staySync = Rswift.StringResource(key: "Stay Sync", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// ru translation:    Unblock
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let unblock = Rswift.StringResource(key: "   Unblock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: About me
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let aboutMe = Rswift.StringResource(key: "About me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Add new Story
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let addNewStory = Rswift.StringResource(key: "Add new Story", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Are you sure you want to delete the account from WoWonder Messenger
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let areYouSureYouWantToDeleteTheAccountFromWoWonderMessenger = Rswift.StringResource(key: "Are you sure you want to delete the account from WoWonder Messenger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Are you sure you want to logout?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let areYouSureYouWantToLogout = Rswift.StringResource(key: "Are you sure you want to logout?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Blocked Users
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let blockedUsers = Rswift.StringResource(key: "Blocked Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: CANCEL
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: CLOSE
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let closE = Rswift.StringResource(key: "CLOSE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Calling
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let calling = Rswift.StringResource(key: "Calling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Change your password
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let changeYourPassword = Rswift.StringResource(key: "Change your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Clear call log
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let clearCallLog = Rswift.StringResource(key: "Clear call log", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Conversation tones
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let conversationTones = Rswift.StringResource(key: "Conversation tones", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Delete Account
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Display your app language
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let displayYourAppLanguage = Rswift.StringResource(key: "Display your app language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Don't worry type your email here and will will recover it for you.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let donTWorryTypeYourEmailHereAndWillWillRecoverItForYou = Rswift.StringResource(key: "Don't worry type your email here and will will recover it for you.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Edit Profile and avatar
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let editProfileAndAvatar = Rswift.StringResource(key: "Edit Profile and avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Female
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let female = Rswift.StringResource(key: "Female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Followers
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let followers = Rswift.StringResource(key: "Followers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Following
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let following = Rswift.StringResource(key: "Following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: General
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let general = Rswift.StringResource(key: "General", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Get notifications when you receive messages
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let getNotificationsWhenYouReceiveMessages = Rswift.StringResource(key: "Get notifications when you receive messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Hang Up
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let hangUp = Rswift.StringResource(key: "Hang Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Help
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: I agree to the terms and conditions
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let iAgreeToTheTermsAndConditions = Rswift.StringResource(key: "I agree to the terms and conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: If you forgot your password, you can reset it from here.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let ifYouForgotYourPasswordYouCanResetItFromHere = Rswift.StringResource(key: "If you forgot your password, you can reset it from here.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Label
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let label = Rswift.StringResource(key: "Label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Language
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Loading Profile...
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let loadingProfile = Rswift.StringResource(key: "Loading Profile...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Location
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Log in
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let logIn = Rswift.StringResource(key: "Log in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Login with Facebook
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let loginWithFacebook = Rswift.StringResource(key: "Login with Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Login with google
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let loginWithGoogle = Rswift.StringResource(key: "Login with google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Logout
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda = Rswift.StringResource(key: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Male
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let male = Rswift.StringResource(key: "Male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Message Notifications
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let messageNotifications = Rswift.StringResource(key: "Message Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Messengerv2.3
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let messengerv23 = Rswift.StringResource(key: "Messengerv2.3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Mute
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let mute = Rswift.StringResource(key: "Mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: My Account
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let myAccount = Rswift.StringResource(key: "My Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Name
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: No Calls
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let noCalls = Rswift.StringResource(key: "No Calls", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: No body
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let noBody = Rswift.StringResource(key: "No body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: No internet access
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let noInternetAccess = Rswift.StringResource(key: "No internet access", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: No more Messages
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let noMoreMessages = Rswift.StringResource(key: "No more Messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Notification Popup
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let notificationPopup = Rswift.StringResource(key: "Notification Popup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: OK
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Password
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: People i Follow
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let peopleIFollow = Rswift.StringResource(key: "People i Follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Phone
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let phone = Rswift.StringResource(key: "Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Photos and videos shared in stories are only visible for 24 hours after they have been added.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let photosAndVideosSharedInStoriesAreOnlyVisibleFor24HoursAfterTheyHaveBeenAdded = Rswift.StringResource(key: "Photos and videos shared in stories are only visible for 24 hours after they have been added.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Play sounds for incoming and outgoing messages
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let playSoundsForIncomingAndOutgoingMessages = Rswift.StringResource(key: "Play sounds for incoming and outgoing messages", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Please check your internet connection.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let pleaseCheckYourInternetConnection = Rswift.StringResource(key: "Please check your internet connection.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Privacy
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let privacy = Rswift.StringResource(key: "Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Privacy Policy
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Profile Picture
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let profilePicture = Rswift.StringResource(key: "Profile Picture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: RETRY
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let retrY = Rswift.StringResource(key: "RETRY", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Register now
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let registerNow = Rswift.StringResource(key: "Register now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Register now and start chatting with your friends
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let registerNowAndStartChattingWithYourFriends = Rswift.StringResource(key: "Register now and start chatting with your friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Report a Problem
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let reportAProblem = Rswift.StringResource(key: "Report a Problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: SKIP
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let skiP = Rswift.StringResource(key: "SKIP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Search
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Search Contact
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let searchContact = Rswift.StringResource(key: "Search Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Search Random
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let searchRandom = Rswift.StringResource(key: "Search Random", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Security
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let security = Rswift.StringResource(key: "Security", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Select what you want
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let selectWhatYouWant = Rswift.StringResource(key: "Select what you want", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Send
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Social Links 
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let socialLinks = Rswift.StringResource(key: "Social Links ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Start Blocking Users
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let startBlockingUsers = Rswift.StringResource(key: "Start Blocking Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Start a new call from your friends list by pressing the button at the bottom of the screen.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let startANewCallFromYourFriendsListByPressingTheButtonAtTheBottomOfTheScreen = Rswift.StringResource(key: "Start a new call from your friends list by pressing the button at the bottom of the screen.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Start adding new contact !!
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let startAddingNewContact = Rswift.StringResource(key: "Start adding new contact !!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Start new conversations by going to contact
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let startNewConversationsByGoingToContact = Rswift.StringResource(key: "Start new conversations by going to contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Start writing to search
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let startWritingToSearch = Rswift.StringResource(key: "Start writing to search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Status
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let status = Rswift.StringResource(key: "Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Support
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let support = Rswift.StringResource(key: "Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Switch Camera
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let switchCamera = Rswift.StringResource(key: "Switch Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Terms of Service
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let termsOfService = Rswift.StringResource(key: "Terms of Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: There are no Contacts
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let thereAreNoContacts = Rswift.StringResource(key: "There are no Contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: There are no stories
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let thereAreNoStories = Rswift.StringResource(key: "There are no stories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: There is no blocked Users
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let thereIsNoBlockedUsers = Rswift.StringResource(key: "There is no blocked Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: User Info
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let userInfo = Rswift.StringResource(key: "User Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: UserName
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let userName = Rswift.StringResource(key: "UserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Video Mute
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let videoMute = Rswift.StringResource(key: "Video Mute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Warning !
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let warning = Rswift.StringResource(key: "Warning !", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Website
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let website = Rswift.StringResource(key: "Website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Who can follow me?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let whoCanFollowMe = Rswift.StringResource(key: "Who can follow me?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Who can message me?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let whoCanMessageMe = Rswift.StringResource(key: "Who can message me?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: Who can see my birthday?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let whoCanSeeMyBirthday = Rswift.StringResource(key: "Who can see my birthday?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: WoWonder
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let woWonder = Rswift.StringResource(key: "WoWonder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: WoWonder Messenger
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let woWonderMessenger = Rswift.StringResource(key: "WoWonder Messenger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: and
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let and = Rswift.StringResource(key: "and", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: count
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let count = Rswift.StringResource(key: "count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      /// ru translation: something to show
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static let somethingToShow = Rswift.StringResource(key: "something to show", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru", "en", "tr", "it", "ar-001", "fr", "de", "es"], comment: nil)
      
      /// en translation: Done
      /// 
      /// Locales: en
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fast so we can take you to our space
      /// 
      /// Locales: en
      static func fastSoWeCanTakeYouToOurSpace(_: Void = ()) -> String {
        return NSLocalizedString("Fast so we can take you to our space", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Find new friends and contacts
      /// 
      /// Locales: en
      static func findNewFriendsAndContacts(_: Void = ()) -> String {
        return NSLocalizedString("Find new friends and contacts", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Keep you conversation going from all devices
      /// 
      /// Locales: en
      static func keepYouConversationGoingFromAllDevices(_: Void = ()) -> String {
        return NSLocalizedString("Keep you conversation going from all devices", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Features
      /// 
      /// Locales: en
      static func newFeatures(_: Void = ()) -> String {
        return NSLocalizedString("New Features", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Version
      /// 
      /// Locales: en
      static func newVersion(_: Void = ()) -> String {
        return NSLocalizedString("New Version", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please write your email
      /// 
      /// Locales: en
      static func pleaseWriteYourEmail(_: Void = ()) -> String {
        return NSLocalizedString("Please write your email", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Save
      /// 
      /// Locales: en
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("Save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search Globally
      /// 
      /// Locales: en
      static func searchGlobally(_: Void = ()) -> String {
        return NSLocalizedString("Search Globally", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send & Recieve all kind of messages
      /// 
      /// Locales: en
      static func sendRecieveAllKindOfMessages(_: Void = ()) -> String {
        return NSLocalizedString("Send & Recieve all kind of messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stay Sync
      /// 
      /// Locales: en
      static func staySync(_: Void = ()) -> String {
        return NSLocalizedString("Stay Sync", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation:    Unblock
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func unblock(_: Void = ()) -> String {
        return NSLocalizedString("   Unblock", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: About me
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func aboutMe(_: Void = ()) -> String {
        return NSLocalizedString("About me", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Add new Story
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func addNewStory(_: Void = ()) -> String {
        return NSLocalizedString("Add new Story", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Are you sure you want to delete the account from WoWonder Messenger
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func areYouSureYouWantToDeleteTheAccountFromWoWonderMessenger(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure you want to delete the account from WoWonder Messenger", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Are you sure you want to logout?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func areYouSureYouWantToLogout(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure you want to logout?", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Blocked Users
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func blockedUsers(_: Void = ()) -> String {
        return NSLocalizedString("Blocked Users", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: CANCEL
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func canceL(_: Void = ()) -> String {
        return NSLocalizedString("CANCEL", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: CLOSE
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func closE(_: Void = ()) -> String {
        return NSLocalizedString("CLOSE", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Calling
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func calling(_: Void = ()) -> String {
        return NSLocalizedString("Calling", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Change your password
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func changeYourPassword(_: Void = ()) -> String {
        return NSLocalizedString("Change your password", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Clear call log
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func clearCallLog(_: Void = ()) -> String {
        return NSLocalizedString("Clear call log", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Conversation tones
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func conversationTones(_: Void = ()) -> String {
        return NSLocalizedString("Conversation tones", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Delete Account
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func deleteAccount(_: Void = ()) -> String {
        return NSLocalizedString("Delete Account", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Display your app language
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func displayYourAppLanguage(_: Void = ()) -> String {
        return NSLocalizedString("Display your app language", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Don't worry type your email here and will will recover it for you.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func donTWorryTypeYourEmailHereAndWillWillRecoverItForYou(_: Void = ()) -> String {
        return NSLocalizedString("Don't worry type your email here and will will recover it for you.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Edit Profile and avatar
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func editProfileAndAvatar(_: Void = ()) -> String {
        return NSLocalizedString("Edit Profile and avatar", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Female
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func female(_: Void = ()) -> String {
        return NSLocalizedString("Female", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Followers
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func followers(_: Void = ()) -> String {
        return NSLocalizedString("Followers", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Following
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func following(_: Void = ()) -> String {
        return NSLocalizedString("Following", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: General
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func general(_: Void = ()) -> String {
        return NSLocalizedString("General", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Get notifications when you receive messages
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func getNotificationsWhenYouReceiveMessages(_: Void = ()) -> String {
        return NSLocalizedString("Get notifications when you receive messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Hang Up
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func hangUp(_: Void = ()) -> String {
        return NSLocalizedString("Hang Up", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Help
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func help(_: Void = ()) -> String {
        return NSLocalizedString("Help", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: I agree to the terms and conditions
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func iAgreeToTheTermsAndConditions(_: Void = ()) -> String {
        return NSLocalizedString("I agree to the terms and conditions", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: If you forgot your password, you can reset it from here.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func ifYouForgotYourPasswordYouCanResetItFromHere(_: Void = ()) -> String {
        return NSLocalizedString("If you forgot your password, you can reset it from here.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Label
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func label(_: Void = ()) -> String {
        return NSLocalizedString("Label", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Language
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func language(_: Void = ()) -> String {
        return NSLocalizedString("Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Loading Profile...
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func loadingProfile(_: Void = ()) -> String {
        return NSLocalizedString("Loading Profile...", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Location
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func location(_: Void = ()) -> String {
        return NSLocalizedString("Location", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Log in
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func logIn(_: Void = ()) -> String {
        return NSLocalizedString("Log in", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Login with Facebook
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func loginWithFacebook(_: Void = ()) -> String {
        return NSLocalizedString("Login with Facebook", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Login with google
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func loginWithGoogle(_: Void = ()) -> String {
        return NSLocalizedString("Login with google", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Logout
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("Logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda(_: Void = ()) -> String {
        return NSLocalizedString("Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Male
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func male(_: Void = ()) -> String {
        return NSLocalizedString("Male", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Message Notifications
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func messageNotifications(_: Void = ()) -> String {
        return NSLocalizedString("Message Notifications", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Messengerv2.3
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func messengerv23(_: Void = ()) -> String {
        return NSLocalizedString("Messengerv2.3", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Mute
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func mute(_: Void = ()) -> String {
        return NSLocalizedString("Mute", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: My Account
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func myAccount(_: Void = ()) -> String {
        return NSLocalizedString("My Account", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Name
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func name(_: Void = ()) -> String {
        return NSLocalizedString("Name", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: No Calls
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func noCalls(_: Void = ()) -> String {
        return NSLocalizedString("No Calls", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: No body
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func noBody(_: Void = ()) -> String {
        return NSLocalizedString("No body", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: No internet access
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func noInternetAccess(_: Void = ()) -> String {
        return NSLocalizedString("No internet access", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: No more Messages
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func noMoreMessages(_: Void = ()) -> String {
        return NSLocalizedString("No more Messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Notification Popup
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func notificationPopup(_: Void = ()) -> String {
        return NSLocalizedString("Notification Popup", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: OK
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Password
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: People i Follow
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func peopleIFollow(_: Void = ()) -> String {
        return NSLocalizedString("People i Follow", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Phone
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func phone(_: Void = ()) -> String {
        return NSLocalizedString("Phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Photos and videos shared in stories are only visible for 24 hours after they have been added.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func photosAndVideosSharedInStoriesAreOnlyVisibleFor24HoursAfterTheyHaveBeenAdded(_: Void = ()) -> String {
        return NSLocalizedString("Photos and videos shared in stories are only visible for 24 hours after they have been added.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Play sounds for incoming and outgoing messages
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func playSoundsForIncomingAndOutgoingMessages(_: Void = ()) -> String {
        return NSLocalizedString("Play sounds for incoming and outgoing messages", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Please check your internet connection.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func pleaseCheckYourInternetConnection(_: Void = ()) -> String {
        return NSLocalizedString("Please check your internet connection.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Privacy
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func privacy(_: Void = ()) -> String {
        return NSLocalizedString("Privacy", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Privacy Policy
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func privacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("Privacy Policy", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Profile Picture
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func profilePicture(_: Void = ()) -> String {
        return NSLocalizedString("Profile Picture", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: RETRY
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func retrY(_: Void = ()) -> String {
        return NSLocalizedString("RETRY", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Register now
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func registerNow(_: Void = ()) -> String {
        return NSLocalizedString("Register now", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Register now and start chatting with your friends
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func registerNowAndStartChattingWithYourFriends(_: Void = ()) -> String {
        return NSLocalizedString("Register now and start chatting with your friends", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Report a Problem
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func reportAProblem(_: Void = ()) -> String {
        return NSLocalizedString("Report a Problem", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: SKIP
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func skiP(_: Void = ()) -> String {
        return NSLocalizedString("SKIP", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Search
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func search(_: Void = ()) -> String {
        return NSLocalizedString("Search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Search Contact
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func searchContact(_: Void = ()) -> String {
        return NSLocalizedString("Search Contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Search Random
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func searchRandom(_: Void = ()) -> String {
        return NSLocalizedString("Search Random", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Security
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func security(_: Void = ()) -> String {
        return NSLocalizedString("Security", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Select what you want
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func selectWhatYouWant(_: Void = ()) -> String {
        return NSLocalizedString("Select what you want", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Send
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("Send", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Social Links 
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func socialLinks(_: Void = ()) -> String {
        return NSLocalizedString("Social Links ", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Start Blocking Users
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func startBlockingUsers(_: Void = ()) -> String {
        return NSLocalizedString("Start Blocking Users", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Start a new call from your friends list by pressing the button at the bottom of the screen.
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func startANewCallFromYourFriendsListByPressingTheButtonAtTheBottomOfTheScreen(_: Void = ()) -> String {
        return NSLocalizedString("Start a new call from your friends list by pressing the button at the bottom of the screen.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Start adding new contact !!
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func startAddingNewContact(_: Void = ()) -> String {
        return NSLocalizedString("Start adding new contact !!", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Start new conversations by going to contact
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func startNewConversationsByGoingToContact(_: Void = ()) -> String {
        return NSLocalizedString("Start new conversations by going to contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Start writing to search
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func startWritingToSearch(_: Void = ()) -> String {
        return NSLocalizedString("Start writing to search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Status
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func status(_: Void = ()) -> String {
        return NSLocalizedString("Status", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Support
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func support(_: Void = ()) -> String {
        return NSLocalizedString("Support", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Switch Camera
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func switchCamera(_: Void = ()) -> String {
        return NSLocalizedString("Switch Camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Terms of Service
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func termsOfService(_: Void = ()) -> String {
        return NSLocalizedString("Terms of Service", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: There are no Contacts
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func thereAreNoContacts(_: Void = ()) -> String {
        return NSLocalizedString("There are no Contacts", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: There are no stories
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func thereAreNoStories(_: Void = ()) -> String {
        return NSLocalizedString("There are no stories", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: There is no blocked Users
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func thereIsNoBlockedUsers(_: Void = ()) -> String {
        return NSLocalizedString("There is no blocked Users", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: User Info
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func userInfo(_: Void = ()) -> String {
        return NSLocalizedString("User Info", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: UserName
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func userName(_: Void = ()) -> String {
        return NSLocalizedString("UserName", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Video Mute
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func videoMute(_: Void = ()) -> String {
        return NSLocalizedString("Video Mute", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Warning !
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func warning(_: Void = ()) -> String {
        return NSLocalizedString("Warning !", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Website
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func website(_: Void = ()) -> String {
        return NSLocalizedString("Website", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Who can follow me?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func whoCanFollowMe(_: Void = ()) -> String {
        return NSLocalizedString("Who can follow me?", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Who can message me?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func whoCanMessageMe(_: Void = ()) -> String {
        return NSLocalizedString("Who can message me?", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Who can see my birthday?
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func whoCanSeeMyBirthday(_: Void = ()) -> String {
        return NSLocalizedString("Who can see my birthday?", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: WoWonder
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func woWonder(_: Void = ()) -> String {
        return NSLocalizedString("WoWonder", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: WoWonder Messenger
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func woWonderMessenger(_: Void = ()) -> String {
        return NSLocalizedString("WoWonder Messenger", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: and
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func and(_: Void = ()) -> String {
        return NSLocalizedString("and", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: count
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func count(_: Void = ()) -> String {
        return NSLocalizedString("count", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: something to show
      /// 
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      static func somethingToShow(_: Void = ()) -> String {
        return NSLocalizedString("something to show", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddParticipantCollectionCell.validate()
      try _AddParticipantsTableCell.validate()
      try _BlockedUsersTableCell.validate()
      try _CallsTableCell.validate()
      try _ChatReceiverAudioTableCell.validate()
      try _ChatReceiverContactTableCell.validate()
      try _ChatReceiverDocumentTableCell.validate()
      try _ChatReceiverImageTableCell.validate()
      try _ChatSenderAudioTableCell.validate()
      try _ChatSenderContactTableCell.validate()
      try _ChatSenderDocumentTableCell.validate()
      try _ChatSenderImageTableCell.validate()
      try _ChatsTableCell.validate()
      try _CreateGroupCollectionCell.validate()
      try _FindFriendsCollectionCell.validate()
      try _FollowingsTableCell.validate()
      try _GroupTableCell.validate()
      try _IntroItemView.validate()
      try _InviteFriendsTableCell.validate()
      try _RequestGroupOneTableCell.validate()
      try _SearchRandomTableCell.validate()
      try _SelectContactTableCell.validate()
      try _SelectLanguageTableCell.validate()
      try _StoriesTableCell.validate()
      try _UserSuggestionCollectionCell.validate()
    }
    
    struct _AddParticipantCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddParticipant_CollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "AddParticipant_CollectionCell"
      let name = "AddParticipant-CollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddParticipant_CollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddParticipant_CollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_addBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_addBtn' is used in nib 'AddParticipant-CollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AddParticipantsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddParticipants_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "AddParticipants_TableCell"
      let name = "AddParticipants-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddParticipants_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddParticipants_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'AddParticipants-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheckRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheckRed' is used in nib 'AddParticipants-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BlockedUsersTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BlockedUsers_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "BlockedUsers_TableCell"
      let name = "BlockedUsers-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedUsers_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedUsers_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'BlockedUsers-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CallsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Calls_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "Calls_TableCell"
      let name = "Calls-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Calls_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Calls_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_callIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_callIcon' is used in nib 'Calls-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'Calls-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatReceiverAudioTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatReceiverAudio_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatReceiverAudio_TableCell"
      let name = "ChatReceiverAudio-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverAudio_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverAudio_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in nib 'ChatReceiverAudio-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatReceiverContactTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatReceiverContact_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatReceiverContact_TableCell"
      let name = "ChatReceiverContact-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverContact_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverContact_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'ChatReceiverContact-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatReceiverDocumentTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatReceiverDocument_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatReceiverDocument_TableCell"
      let name = "ChatReceiverDocument-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverDocument_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverDocument_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_doc", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_doc' is used in nib 'ChatReceiverDocument-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatReceiverImageTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatReceiverImage_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatReceiverImage_TableCell"
      let name = "ChatReceiverImage-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverImage_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverImage_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in nib 'ChatReceiverImage-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatReceiverStrickerTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChatReceiverStricker_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatReceiverStricker_TableCell"
      let name = "ChatReceiverStricker-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiverStricker_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiverStricker_TableCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChatReceiverTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChatReceiver_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatReceiver_TableCell"
      let name = "ChatReceiver-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatReceiver_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatReceiver_TableCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChatSenderAudioTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatSenderAudio_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatSenderAudio_TableCell"
      let name = "ChatSenderAudio-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderAudio_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderAudio_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in nib 'ChatSenderAudio-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatSenderContactTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatSenderContact_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatSenderContact_TableCell"
      let name = "ChatSenderContact-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderContact_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderContact_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'ChatSenderContact-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatSenderDocumentTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatSenderDocument_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatSenderDocument_TableCell"
      let name = "ChatSenderDocument-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderDocument_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderDocument_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_doc", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_doc' is used in nib 'ChatSenderDocument-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatSenderImageTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChatSenderImage_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatSenderImage_TableCell"
      let name = "ChatSenderImage-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderImage_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderImage_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in nib 'ChatSenderImage-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatSenderStickerTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChatSenderSticker_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatSenderSticker_TableCel"
      let name = "ChatSenderSticker-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSenderSticker_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSenderSticker_TableCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChatSenderTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChatSender_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "ChatSender_TableCell"
      let name = "ChatSender-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatSender_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatSender_TableCell
      }
      
      fileprivate init() {}
    }
    
    struct _ChatsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Chats_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "Chats_TableCell"
      let name = "Chats-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Chats_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Chats_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'Chats-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_seen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_seen' is used in nib 'Chats-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CreateGroupCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CreateGroup_CollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "CreateGroup_CollectionCell"
      let name = "CreateGroup-CollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CreateGroup_CollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateGroup_CollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in nib 'CreateGroup-CollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FindFriendsCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FindFriends_CollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "FindFriends_CollectionCell"
      let name = "FindFriends-CollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FindFriends_CollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FindFriends_CollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'FindFriends-CollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FollowingsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Followings_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "Followings_TableCell"
      let name = "Followings-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Followings_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Followings_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'Followings-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _GroupRequestTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GroupRequest_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "GroupRequest_TableCell"
      let name = "GroupRequest-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GroupRequest_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupRequest_TableCell
      }
      
      fileprivate init() {}
    }
    
    struct _GroupTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Group_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "Group_TableCell"
      let name = "Group-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Group_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Group_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'Group-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _IntroItemView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IntroItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IntroItem? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntroItem
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_rocket", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_rocket' is used in nib 'IntroItemView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InviteFriendsTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InviteFriends_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "InviteFriends_TableCell"
      let name = "InviteFriends-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InviteFriends_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InviteFriends_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'InviteFriends-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RequestGroupOneTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RequestGroupOne_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "RequestGroupOne_TableCell"
      let name = "RequestGroupOne-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestGroupOne_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestGroupOne_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_checkblack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checkblack' is used in nib 'RequestGroupOne-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cross' is used in nib 'RequestGroupOne-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchRandomTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchRandom_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchRandom_TableCell"
      let name = "SearchRandom-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchRandom_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchRandom_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'SearchRandom-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectCategoryTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectCategory_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectCategory_TableCell"
      let name = "SelectCategory-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectCategory_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCategory_TableCell
      }
      
      fileprivate init() {}
    }
    
    struct _SelectContactTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectContact_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectContact_TableCell"
      let name = "SelectContact-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectContact_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectContact_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_callIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_callIcon' is used in nib 'SelectContact-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'SelectContact-TableCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_videoBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_videoBlack' is used in nib 'SelectContact-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectLanguageTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectLanguage_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectLanguage_TableCell"
      let name = "SelectLanguage-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectLanguage_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectLanguage_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_radio_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_off' is used in nib 'SelectLanguage-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectTypeTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectType_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectType_TableCell"
      let name = "SelectType-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectType_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectType_TableCell
      }
      
      fileprivate init() {}
    }
    
    struct _StoriesTableCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Stories_TableCell
      
      let bundle = R.hostingBundle
      let identifier = "Stories_TableCell"
      let name = "Stories-TableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Stories_TableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Stories_TableCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'Stories-TableCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _UserSuggestionCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UserSuggestionCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "UserSuggestionCollectionCell"
      let name = "UserSuggestionCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserSuggestionCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserSuggestionCollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in nib 'UserSuggestionCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try call.validate()
      try chat.validate()
      try dashboard.validate()
      try findFriends.validate()
      try group.validate()
      try launchScreen.validate()
      try main.validate()
      try settings.validate()
      try story.validate()
    }
    
    struct call: Rswift.StoryboardResourceType, Rswift.Validatable {
      let agoraCallNotificationPopupVC = StoryboardViewControllerResource<AgoraCallNotificationPopupVC>(identifier: "AgoraCallNotificationPopupVC")
      let agoraCallVC = StoryboardViewControllerResource<AgoraCallVC>(identifier: "AgoraCallVC")
      let bundle = R.hostingBundle
      let name = "Call"
      let twilloVideoCallVC = StoryboardViewControllerResource<TwilloVideoCallVC>(identifier: "TwilloVideoCallVC")
      let videoCallVC = StoryboardViewControllerResource<VideoCallVC>(identifier: "VideoCallVC")
      
      func agoraCallNotificationPopupVC(_: Void = ()) -> AgoraCallNotificationPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agoraCallNotificationPopupVC)
      }
      
      func agoraCallVC(_: Void = ()) -> AgoraCallVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agoraCallVC)
      }
      
      func twilloVideoCallVC(_: Void = ()) -> TwilloVideoCallVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: twilloVideoCallVC)
      }
      
      func videoCallVC(_: Void = ()) -> VideoCallVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videoCallVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_endcall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_endcall' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_mute", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_mute' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_mute_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_mute_blue' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_speaker", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_speaker' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_speaker_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_speaker_blue' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hangUpButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hangUpButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "localVideoMutedBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'localVideoMutedBg' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "muteButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'muteButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "muteButtonSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'muteButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchCameraButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'switchCameraButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchCameraButtonSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'switchCameraButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMuteButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videoMuteButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMuteButtonSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videoMuteButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMutedIndicator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'videoMutedIndicator' is used in storyboard 'Call', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.call().agoraCallNotificationPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agoraCallNotificationPopupVC' could not be loaded from storyboard 'Call' as 'AgoraCallNotificationPopupVC'.") }
        if _R.storyboard.call().agoraCallVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agoraCallVC' could not be loaded from storyboard 'Call' as 'AgoraCallVC'.") }
        if _R.storyboard.call().twilloVideoCallVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'twilloVideoCallVC' could not be loaded from storyboard 'Call' as 'TwilloVideoCallVC'.") }
        if _R.storyboard.call().videoCallVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videoCallVC' could not be loaded from storyboard 'Call' as 'VideoCallVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct chat: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let chatScreenVC = StoryboardViewControllerResource<ChatScreenVC>(identifier: "ChatScreenVC")
      let name = "Chat"
      let selectTypeVC = StoryboardViewControllerResource<SelectTypeVC>(identifier: "SelectTypeVC")
      let showChatIntentsVC = StoryboardViewControllerResource<ShowChatIntentsVC>(identifier: "ShowChatIntentsVC")
      let viewProfileVC = StoryboardViewControllerResource<ViewProfileVC>(identifier: "ViewProfileVC")
      
      func chatScreenVC(_: Void = ()) -> ChatScreenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatScreenVC)
      }
      
      func selectTypeVC(_: Void = ()) -> SelectTypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectTypeVC)
      }
      
      func showChatIntentsVC(_: Void = ()) -> ShowChatIntentsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showChatIntentsVC)
      }
      
      func viewProfileVC(_: Void = ()) -> ViewProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewProfileVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_attach", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attach' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_callRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_callRed' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_call_white' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_bacground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chat_bacground' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_color' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_contact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_contact' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_globe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_globe' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_magnifying_glass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_magnifying_glass' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_male", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_male' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_marker", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_marker' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_microphone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_microphone' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_more' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_selectPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_selectPhoto' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_videoBordered", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_videoBordered' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_video_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_video_white' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.chat().chatScreenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatScreenVC' could not be loaded from storyboard 'Chat' as 'ChatScreenVC'.") }
        if _R.storyboard.chat().selectTypeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectTypeVC' could not be loaded from storyboard 'Chat' as 'SelectTypeVC'.") }
        if _R.storyboard.chat().showChatIntentsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showChatIntentsVC' could not be loaded from storyboard 'Chat' as 'ShowChatIntentsVC'.") }
        if _R.storyboard.chat().viewProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewProfileVC' could not be loaded from storyboard 'Chat' as 'ViewProfileVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct dashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let blockedUsersPopupVC = StoryboardViewControllerResource<BlockedUsersPopupVC>(identifier: "BlockedUsersPopupVC")
      let blockedUsersVC = StoryboardViewControllerResource<BlockedUsersVC>(identifier: "BlockedUsersVC")
      let bundle = R.hostingBundle
      let callVC = StoryboardViewControllerResource<CallVC>(identifier: "CallVC")
      let chatVC = StoryboardViewControllerResource<ChatVC>(identifier: "ChatVC")
      let dashboard = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Dashboard")
      let dashboardParentVC = StoryboardViewControllerResource<DashboardParentVC>(identifier: "DashboardParentVC")
      let followingVC = StoryboardViewControllerResource<FollowingVC>(identifier: "FollowingVC")
      let groupVC = StoryboardViewControllerResource<GroupVC>(identifier: "GroupVC")
      let inviteFriendsVC = StoryboardViewControllerResource<InviteFriendsVC>(identifier: "InviteFriendsVC")
      let name = "Dashboard"
      let searchByVC = StoryboardViewControllerResource<SearchByVC>(identifier: "SearchByVC")
      let searchRandomVC = StoryboardViewControllerResource<SearchRandomVC>(identifier: "SearchRandomVC")
      let selectCategoryVC = StoryboardViewControllerResource<SelectCategoryVC>(identifier: "SelectCategoryVC")
      let selectContactVC = StoryboardViewControllerResource<SelectContactVC>(identifier: "SelectContactVC")
      let selectRandomPopupVC = StoryboardViewControllerResource<SelectRandomPopupVC>(identifier: "SelectRandomPopupVC")
      let storiesVC = StoryboardViewControllerResource<StoriesVC>(identifier: "StoriesVC")
      
      func blockedUsersPopupVC(_: Void = ()) -> BlockedUsersPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blockedUsersPopupVC)
      }
      
      func blockedUsersVC(_: Void = ()) -> BlockedUsersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: blockedUsersVC)
      }
      
      func callVC(_: Void = ()) -> CallVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: callVC)
      }
      
      func chatVC(_: Void = ()) -> ChatVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chatVC)
      }
      
      func dashboard(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboard)
      }
      
      func dashboardParentVC(_: Void = ()) -> DashboardParentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardParentVC)
      }
      
      func followingVC(_: Void = ()) -> FollowingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followingVC)
      }
      
      func groupVC(_: Void = ()) -> GroupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupVC)
      }
      
      func inviteFriendsVC(_: Void = ()) -> InviteFriendsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteFriendsVC)
      }
      
      func searchByVC(_: Void = ()) -> SearchByVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchByVC)
      }
      
      func searchRandomVC(_: Void = ()) -> SearchRandomVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchRandomVC)
      }
      
      func selectCategoryVC(_: Void = ()) -> SelectCategoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectCategoryVC)
      }
      
      func selectContactVC(_: Void = ()) -> SelectContactVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectContactVC)
      }
      
      func selectRandomPopupVC(_: Void = ()) -> SelectRandomPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectRandomPopupVC)
      }
      
      func storiesVC(_: Void = ()) -> StoriesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storiesVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_MOreSearch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_MOreSearch' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bigCamera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bigCamera' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bigNoMessage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bigNoMessage' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blockedUsers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blockedUsers' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_callBig", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_callBig' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calls", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calls' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_lock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_lock' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_more' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_nearBy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_nearBy' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_persons", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_persons' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sear' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_searchMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_searchMore' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_searchbig", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_searchbig' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.dashboard().blockedUsersPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blockedUsersPopupVC' could not be loaded from storyboard 'Dashboard' as 'BlockedUsersPopupVC'.") }
        if _R.storyboard.dashboard().blockedUsersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'blockedUsersVC' could not be loaded from storyboard 'Dashboard' as 'BlockedUsersVC'.") }
        if _R.storyboard.dashboard().callVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'callVC' could not be loaded from storyboard 'Dashboard' as 'CallVC'.") }
        if _R.storyboard.dashboard().chatVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Dashboard' as 'ChatVC'.") }
        if _R.storyboard.dashboard().dashboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboard' could not be loaded from storyboard 'Dashboard' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.dashboard().dashboardParentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardParentVC' could not be loaded from storyboard 'Dashboard' as 'DashboardParentVC'.") }
        if _R.storyboard.dashboard().followingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followingVC' could not be loaded from storyboard 'Dashboard' as 'FollowingVC'.") }
        if _R.storyboard.dashboard().groupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupVC' could not be loaded from storyboard 'Dashboard' as 'GroupVC'.") }
        if _R.storyboard.dashboard().inviteFriendsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteFriendsVC' could not be loaded from storyboard 'Dashboard' as 'InviteFriendsVC'.") }
        if _R.storyboard.dashboard().searchByVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchByVC' could not be loaded from storyboard 'Dashboard' as 'SearchByVC'.") }
        if _R.storyboard.dashboard().searchRandomVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchRandomVC' could not be loaded from storyboard 'Dashboard' as 'SearchRandomVC'.") }
        if _R.storyboard.dashboard().selectCategoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectCategoryVC' could not be loaded from storyboard 'Dashboard' as 'SelectCategoryVC'.") }
        if _R.storyboard.dashboard().selectContactVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectContactVC' could not be loaded from storyboard 'Dashboard' as 'SelectContactVC'.") }
        if _R.storyboard.dashboard().selectRandomPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectRandomPopupVC' could not be loaded from storyboard 'Dashboard' as 'SelectRandomPopupVC'.") }
        if _R.storyboard.dashboard().storiesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storiesVC' could not be loaded from storyboard 'Dashboard' as 'StoriesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct findFriends: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let filterVC = StoryboardViewControllerResource<FilterVC>(identifier: "FilterVC")
      let findFriendsVC = StoryboardViewControllerResource<FindFriendsVC>(identifier: "FindFriendsVC")
      let name = "FindFriends"
      
      func filterVC(_: Void = ()) -> FilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterVC)
      }
      
      func findFriendsVC(_: Void = ()) -> FindFriendsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findFriendsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_blockedUsers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blockedUsers' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filterFind", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_filterFind' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_manFilter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_manFilter' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_personFilter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_personFilter' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_statusFilter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_statusFilter' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.findFriends().filterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'FindFriends' as 'FilterVC'.") }
        if _R.storyboard.findFriends().findFriendsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findFriendsVC' could not be loaded from storyboard 'FindFriends' as 'FindFriendsVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct group: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addParticipantsVC = StoryboardViewControllerResource<AddParticipantsVC>(identifier: "AddParticipantsVC")
      let bundle = R.hostingBundle
      let createGroupVC = StoryboardViewControllerResource<CreateGroupVC>(identifier: "CreateGroupVC")
      let groupChatScreenVC = StoryboardViewControllerResource<GroupChatScreenVC>(identifier: "GroupChatScreenVC")
      let groupRequestVC = StoryboardViewControllerResource<GroupRequestVC>(identifier: "GroupRequestVC")
      let name = "Group"
      let updateGroupVC = StoryboardViewControllerResource<UpdateGroupVC>(identifier: "UpdateGroupVC")
      
      func addParticipantsVC(_: Void = ()) -> AddParticipantsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addParticipantsVC)
      }
      
      func createGroupVC(_: Void = ()) -> CreateGroupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createGroupVC)
      }
      
      func groupChatScreenVC(_: Void = ()) -> GroupChatScreenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupChatScreenVC)
      }
      
      func groupRequestVC(_: Void = ()) -> GroupRequestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: groupRequestVC)
      }
      
      func updateGroupVC(_: Void = ()) -> UpdateGroupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateGroupVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_attach", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_attach' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_bacground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chat_bacground' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_contact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_contact' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_filter' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_microphone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_microphone' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_more' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_playBtn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_playBtn' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_searchbig", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_searchbig' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_selectPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_selectPhoto' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_videoBordered", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_videoBordered' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_splash' is used in storyboard 'Group', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.group().addParticipantsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addParticipantsVC' could not be loaded from storyboard 'Group' as 'AddParticipantsVC'.") }
        if _R.storyboard.group().createGroupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createGroupVC' could not be loaded from storyboard 'Group' as 'CreateGroupVC'.") }
        if _R.storyboard.group().groupChatScreenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupChatScreenVC' could not be loaded from storyboard 'Group' as 'GroupChatScreenVC'.") }
        if _R.storyboard.group().groupRequestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'groupRequestVC' could not be loaded from storyboard 'Group' as 'GroupRequestVC'.") }
        if _R.storyboard.group().updateGroupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateGroupVC' could not be loaded from storyboard 'Group' as 'UpdateGroupVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "img_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashScreenVC
      
      let bundle = R.hostingBundle
      let forgetPasswordVC = StoryboardViewControllerResource<ForgetPasswordVC>(identifier: "ForgetPasswordVC")
      let introVC = StoryboardViewControllerResource<IntroVC>(identifier: "IntroVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let main = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Main")
      let name = "Main"
      let noInternetDialogVC = StoryboardViewControllerResource<NoInternetDialogVC>(identifier: "NoInternetDialogVC")
      let securityPopupVC = StoryboardViewControllerResource<SecurityPopupVC>(identifier: "SecurityPopupVC")
      let signUpVC = StoryboardViewControllerResource<SignUpVC>(identifier: "SignUpVC")
      let splashScreenVC = StoryboardViewControllerResource<SplashScreenVC>(identifier: "SplashScreenVC")
      let userSuggestionVC = StoryboardViewControllerResource<UserSuggestionVC>(identifier: "UserSuggestionVC")
      let webViewVC = StoryboardViewControllerResource<WebViewVC>(identifier: "WebViewVC")
      
      func forgetPasswordVC(_: Void = ()) -> ForgetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgetPasswordVC)
      }
      
      func introVC(_: Void = ()) -> IntroVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introVC)
      }
      
      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }
      
      func main(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: main)
      }
      
      func noInternetDialogVC(_: Void = ()) -> NoInternetDialogVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noInternetDialogVC)
      }
      
      func securityPopupVC(_: Void = ()) -> SecurityPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: securityPopupVC)
      }
      
      func signUpVC(_: Void = ()) -> SignUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpVC)
      }
      
      func splashScreenVC(_: Void = ()) -> SplashScreenVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashScreenVC)
      }
      
      func userSuggestionVC(_: Void = ()) -> UserSuggestionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userSuggestionVC)
      }
      
      func webViewVC(_: Void = ()) -> WebViewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blockedUsers", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_blockedUsers' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_intro_forwardarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_intro_forwardarrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_username", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_username' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_splash' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().forgetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Main' as 'ForgetPasswordVC'.") }
        if _R.storyboard.main().introVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introVC' could not be loaded from storyboard 'Main' as 'IntroVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().main() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().noInternetDialogVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noInternetDialogVC' could not be loaded from storyboard 'Main' as 'NoInternetDialogVC'.") }
        if _R.storyboard.main().securityPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'securityPopupVC' could not be loaded from storyboard 'Main' as 'SecurityPopupVC'.") }
        if _R.storyboard.main().signUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'Main' as 'SignUpVC'.") }
        if _R.storyboard.main().splashScreenVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashScreenVC' could not be loaded from storyboard 'Main' as 'SplashScreenVC'.") }
        if _R.storyboard.main().userSuggestionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userSuggestionVC' could not be loaded from storyboard 'Main' as 'UserSuggestionVC'.") }
        if _R.storyboard.main().webViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewVC' could not be loaded from storyboard 'Main' as 'WebViewVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsVC
      
      let aboutMeVC = StoryboardViewControllerResource<AboutMeVC>(identifier: "AboutMeVC")
      let birthdayPopupVC = StoryboardViewControllerResource<BirthdayPopupVC>(identifier: "BirthdayPopupVC")
      let bundle = R.hostingBundle
      let changeLanguageVC = StoryboardViewControllerResource<ChangeLanguageVC>(identifier: "ChangeLanguageVC")
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let deleteAccountVC = StoryboardViewControllerResource<DeleteAccountVC>(identifier: "DeleteAccountVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let logoutVC = StoryboardViewControllerResource<LogoutVC>(identifier: "LogoutVC")
      let myAccountVC = StoryboardViewControllerResource<MyAccountVC>(identifier: "MyAccountVC")
      let name = "Settings"
      let settingsSelectionPopupVC = StoryboardViewControllerResource<SettingsSelectionPopupVC>(identifier: "SettingsSelectionPopupVC")
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
      
      func aboutMeVC(_: Void = ()) -> AboutMeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutMeVC)
      }
      
      func birthdayPopupVC(_: Void = ()) -> BirthdayPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: birthdayPopupVC)
      }
      
      func changeLanguageVC(_: Void = ()) -> ChangeLanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeLanguageVC)
      }
      
      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }
      
      func deleteAccountVC(_: Void = ()) -> DeleteAccountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deleteAccountVC)
      }
      
      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }
      
      func logoutVC(_: Void = ()) -> LogoutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logoutVC)
      }
      
      func myAccountVC(_: Void = ()) -> MyAccountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAccountVC)
      }
      
      func settingsSelectionPopupVC(_: Void = ()) -> SettingsSelectionPopupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsSelectionPopupVC)
      }
      
      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_callRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_callRed' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_case", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_case' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_emailBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_emailBlack' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_facebook' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_globe", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_globe' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_google' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_instagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_instagram' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_magnifying_glass", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_magnifying_glass' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_male", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_male' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_marker", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_marker' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_personBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_personBlack' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_profileimage' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_radio_off' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_translation_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_translation_settings' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_twitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_twitter' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck_red' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_youtube", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_youtube' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.settings().aboutMeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutMeVC' could not be loaded from storyboard 'Settings' as 'AboutMeVC'.") }
        if _R.storyboard.settings().birthdayPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'birthdayPopupVC' could not be loaded from storyboard 'Settings' as 'BirthdayPopupVC'.") }
        if _R.storyboard.settings().changeLanguageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeLanguageVC' could not be loaded from storyboard 'Settings' as 'ChangeLanguageVC'.") }
        if _R.storyboard.settings().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Settings' as 'ChangePasswordVC'.") }
        if _R.storyboard.settings().deleteAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'Settings' as 'DeleteAccountVC'.") }
        if _R.storyboard.settings().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Settings' as 'EditProfileVC'.") }
        if _R.storyboard.settings().logoutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logoutVC' could not be loaded from storyboard 'Settings' as 'LogoutVC'.") }
        if _R.storyboard.settings().myAccountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAccountVC' could not be loaded from storyboard 'Settings' as 'MyAccountVC'.") }
        if _R.storyboard.settings().settingsSelectionPopupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsSelectionPopupVC' could not be loaded from storyboard 'Settings' as 'SettingsSelectionPopupVC'.") }
        if _R.storyboard.settings().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SettingsVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct story: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CreateStoryVC
      
      let bundle = R.hostingBundle
      let contentVC = StoryboardViewControllerResource<ContentVC>(identifier: "ContentVC")
      let createStoryVC = StoryboardViewControllerResource<CreateStoryVC>(identifier: "CreateStoryVC")
      let name = "Story"
      let pageViewController = StoryboardViewControllerResource<UIKit.UIPageViewController>(identifier: "PageViewController")
      let showStoryVC = StoryboardViewControllerResource<ShowStoryVC>(identifier: "ShowStoryVC")
      
      func contentVC(_: Void = ()) -> ContentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contentVC)
      }
      
      func createStoryVC(_: Void = ()) -> CreateStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createStoryVC)
      }
      
      func pageViewController(_: Void = ()) -> UIKit.UIPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageViewController)
      }
      
      func showStoryVC(_: Void = ()) -> ShowStoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showStoryVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cancel' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_send' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_trash' is used in storyboard 'Story', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.story().contentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contentVC' could not be loaded from storyboard 'Story' as 'ContentVC'.") }
        if _R.storyboard.story().createStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createStoryVC' could not be loaded from storyboard 'Story' as 'CreateStoryVC'.") }
        if _R.storyboard.story().pageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageViewController' could not be loaded from storyboard 'Story' as 'UIKit.UIPageViewController'.") }
        if _R.storyboard.story().showStoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showStoryVC' could not be loaded from storyboard 'Story' as 'ShowStoryVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
